#.yml file for Gitlab-CI support

stages:
- check
- build
- test
- install
- package
- deploy
- downstream

# Default cmake arguments
variables:
  CMAKE_ARG_DEFAULT: "-DBUILD_EXT=ON -DBUILD_PYTHON=ON -DTEST_SWITCH=ON -DPIP_WHEEL_SWITCH=ON ../"
  DOCKER_REGISTRY: "modisdev:5000/sgl_ci"
# this can be used for incremental builds
#  GIT_CLEAN_FLAGS: none
  # This can be set to true by Gitlab UI to only build packages.
  RELEASE_ONLY: "True"

# Template for all normal jobs.
.normal_job:
  only:
    variables:
      - $RELEASE_ONLY != "True"

# Template for all "big" builds.
.big_build:
  only:
    refs:
      - master
      - /^ci_.*$/
      - /^version_.*_prep$/
    variables:
      - $RELEASE_ONLY != "True"

# Template for all builds that should produce packages.
.package_build:
  only:
    refs:
      - master
      - /^ci_.*$/
      - /^version_.*_prep$/
      - tags
      - /^tag_.*$/

# Check Stage
# Runs static analysis on code.
static_analysis:
  stage: check
  tags:
    - docker-executor
  image: $DOCKER_REGISTRY/debian9_fai_ish
  script:
    - ./lint_test.sh
  # Allow failures here to prevent blocking the rest of the pipeline.
  allow_failure: true

build_debian_7:
  stage: build
  extends: .big_build
  tags:
    - docker-executor
    # Not all docker runners support debian 7
    - deb7-support
  image: $DOCKER_REGISTRY/debian7_fai_ish
  script:
    - mkdir build
    - cd build
    - export gpstk=`pwd`/install
    - cmake -DPYTHON_INSTALL_PREFIX=$gpstk -DBUILD_PYTHON=ON -DPIP_WHEEL_SWITCH=OFF -DCMAKE_INSTALL_PREFIX=install -DBUILD_EXT=ON -DTEST_SWITCH=ON ../
    - make all -j 4
  artifacts:
    paths:
      - build/

build_debian_8:
  stage: build
  extends: .big_build
  tags:
    - docker-executor
  image: $DOCKER_REGISTRY/debian8_fai_ish
  script:
    - mkdir build
    - cd build
    - export gpstk=`pwd`/install
    - cmake -DPYTHON_INSTALL_PREFIX=$gpstk -DCMAKE_INSTALL_PREFIX=install $CMAKE_ARG_DEFAULT
    - make all -j 4
  artifacts:
    paths:
      - build/

build_debian_9:
  stage: build
  extends: .normal_job
  tags:
    - docker-executor
  image: $DOCKER_REGISTRY/debian9_fai_ish
  script:
    - mkdir build
    - cd build
    - export gpstk=`pwd`/install
    - cmake -DPYTHON_INSTALL_PREFIX=$gpstk -DCMAKE_INSTALL_PREFIX=install $CMAKE_ARG_DEFAULT
    - make all -j 4
  artifacts:
    paths:
    - build/

build_debian_10:
  stage: build
  extends: .big_build
  tags:
    - docker-executor
  image: $DOCKER_REGISTRY/debian10_fai_ish
  script:
    - mkdir build
    - cd build
    - export gpstk=`pwd`/install
    - cmake -DPYTHON_INSTALL_PREFIX=$gpstk -DCMAKE_INSTALL_PREFIX=install $CMAKE_ARG_DEFAULT
    - make all -j 4
  artifacts:
    paths:
      - build/

build_conda_py27:
  stage: build
  extends: .normal_job
  tags:
    - docker-executor
  image: $DOCKER_REGISTRY/deb9_conda_py27
  script:
    - conda activate py27
    - mkdir build
    - cd build
    - export gpstk=`pwd`/install
    - cmake -DPYTHON_INSTALL_PREFIX=$gpstk -DCMAKE_INSTALL_PREFIX=install $CMAKE_ARG_DEFAULT
    - make all -j 4
  artifacts:
    paths:
      - build/

build_conda_py36:
  stage: build
  extends: .normal_job
  tags:
    - docker-executor
  image: $DOCKER_REGISTRY/deb9_conda_py36
  script:
    - conda activate py36
    - mkdir build
    - cd build
    - export gpstk=`pwd`/install
    - cmake -DPYTHON_INSTALL_PREFIX=$gpstk -DCMAKE_INSTALL_PREFIX=install $CMAKE_ARG_DEFAULT
    - make all -j 4
  artifacts:
    paths:
      - build/

build_redhat:
  stage: build
  extends: .normal_job
  tags:
    - docker-executor
  image: $DOCKER_REGISTRY/centos7_sgl
  script:
    - mkdir build
    - cd build
    - export gpstk=`pwd`/install
    - cmake -DPYTHON_INSTALL_PREFIX=$gpstk -DCMAKE_INSTALL_PREFIX=install $CMAKE_ARG_DEFAULT
    - make all -j 4
  artifacts:
    paths:
    - build/

build_redhat_swig3:
  stage: build
  extends: .normal_job
  tags:
    - docker-executor
  image: $DOCKER_REGISTRY/centos7_swig3_sgl
  script:
    - mkdir build
    - cd build
    - export gpstk=`pwd`/install
    - cmake -DPYTHON_INSTALL_PREFIX=$gpstk -DCMAKE_INSTALL_PREFIX=install $CMAKE_ARG_DEFAULT
    - make all -j 4
  artifacts:
    paths:
      - build/

build_windows:
  stage: build
  extends: .normal_job
  tags:
    - win10
  script:
# incremental builds
#    - if not exist "%CI_PROJECT_DIR%/build/" mkdir "%CI_PROJECT_DIR%/build"
# non-incremental builds
    - mkdir build
    - cd build
    - cmake -DCMAKE_INSTALL_PREFIX=install -DBUILD_EXT=ON -DBUILD_PYTHON=OFF -DTEST_SWITCH=ON -G "Visual Studio 14 2015 Win64" ../
    - cmake --build . --config Release
  artifacts:
    paths:
    - build/
# used for incremental builds
#  cache:
#    paths:
#    - build/
  timeout: 30m
# Temporarily allow failures as Windows Runner issues are resolved
  allow_failure: true


# Test Stage
# Runs all tests of GPSTK for each platform
test_debian_7:
  stage: test
  extends: .big_build
  tags:
    - docker-executor
    # Not all docker runners support debian 7
    - deb7-support
  image: $DOCKER_REGISTRY/debian7_fai_ish
  script:
    - cd build
    - ctest -j 4
    - touch $CI_PROJECT_DIR/success
  artifacts:
    when: on_failure
    paths:
    - build/Testing/Temporary/
  dependencies:
    - build_debian_7
  after_script:
    # Only show the failure log, if there were failures.
    # Also, the whole log is too long, so grep for lines of interest.
    - |
      if [ -e success ]; then
         echo "Good. Gooooood."
      else
         grep "Total Failures for" $CI_PROJECT_DIR/build/Testing/Temporary/LastTest.log
      fi
  # Allowing failure until this can be traced down.
  allow_failure: true

test_debian_8:
  stage: test
  extends: .big_build
  tags:
    - docker-executor
  image: $DOCKER_REGISTRY/debian8_fai_ish
  script:
    - cd build
    - ctest -j 4
    - touch $CI_PROJECT_DIR/success
  artifacts:
    when: on_failure
    paths:
    - build/Testing/Temporary/
  dependencies:
    - build_debian_8
  after_script:
    # Only show the failure log, if there were failures.
    # Also, the whole log is too long, so grep for lines of interest.
    - |
      if [ -e success ]; then
         echo "Good. Gooooood."
      else
         grep "Total Failures for" $CI_PROJECT_DIR/build/Testing/Temporary/LastTest.log
      fi

test_debian_9:
  stage: test
  extends: .normal_job
  tags:
    - docker-executor
  image: $DOCKER_REGISTRY/debian9_fai_ish
  script:
    - cd build
    - ctest -j 4
    - touch $CI_PROJECT_DIR/success
  artifacts:
    when: on_failure
    paths:
    - build/Testing/Temporary/
  dependencies:
    - build_debian_9
  after_script:
    # Only show the failure log, if there were failures.
    # Also, the whole log is too long, so grep for lines of interest.
    - |
      if [ -e success ]; then
         echo "Good. Gooooood."
      else
         grep "Total Failures for" $CI_PROJECT_DIR/build/Testing/Temporary/LastTest.log
      fi

test_debian_10:
  stage: test
  extends: .big_build
  tags:
    - docker-executor
  image: $DOCKER_REGISTRY/debian10_fai_ish
  script:
    - cd build
    - ctest -j 4
    - touch $CI_PROJECT_DIR/success
  artifacts:
    when: on_failure
    paths:
    - build/Testing/Temporary/
  dependencies:
    - build_debian_10
  after_script:
    # Only show the failure log, if there were failures.
    # Also, the whole log is too long, so grep for lines of interest.
    - |
      if [ -e success ]; then
         echo "Good. Gooooood."
      else
         grep "Total Failures for" $CI_PROJECT_DIR/build/Testing/Temporary/LastTest.log
      fi

test_conda_py27:
  stage: test
  extends: .normal_job
  tags:
    - docker-executor
  image: $DOCKER_REGISTRY/deb9_conda_py27
  script:
    - conda activate py27
    - cd build
    - ctest -j 4
    - touch $CI_PROJECT_DIR/success
  artifacts:
    when: on_failure
    paths:
    - build/Testing/Temporary/
  dependencies:
    - build_conda_py27
  after_script:
    # Only show the failure log, if there were failures.
    # Also, the whole log is too long, so grep for lines of interest.
    - |
      if [ -e success ]; then
         echo "Good. Gooooood."
      else
         grep "Total Failures for" $CI_PROJECT_DIR/build/Testing/Temporary/LastTest.log
      fi

test_conda_py36:
  stage: test
  extends: .normal_job
  tags:
    - docker-executor
  image: $DOCKER_REGISTRY/deb9_conda_py36
  script:
    - conda activate py36
    - cd build
    - ctest -j 4
    - touch $CI_PROJECT_DIR/success
  artifacts:
    when: on_failure
    paths:
    - build/Testing/Temporary/
  dependencies:
    - build_conda_py36
  after_script:
    # Only show the failure log, if there were failures.
    # Also, the whole log is too long, so grep for lines of interest.
    - |
      if [ -e success ]; then
         echo "Good. Gooooood."
      else
         grep "Total Failures for" $CI_PROJECT_DIR/build/Testing/Temporary/LastTest.log
      fi

test_redhat:
  stage: test
  extends: .normal_job
  tags:
    - docker-executor
  image: $DOCKER_REGISTRY/centos7_sgl
  script:
    - cd build
    - ctest -j 4
    - touch $CI_PROJECT_DIR/success
  artifacts:
    when: on_failure
    paths:
    - build/Testing/Temporary/
  dependencies:
    - build_redhat
  after_script:
    # Only show the failure log, if there were failures.
    # Also, the whole log is too long, so grep for lines of interest.
    - |
      if [ -e success ]; then
         echo "Good. Gooooood."
      else
         grep "Total Failures for" $CI_PROJECT_DIR/build/Testing/Temporary/LastTest.log
      fi

test_redhat_swig3:
  stage: test
  extends: .normal_job
  tags:
    - docker-executor
  image: $DOCKER_REGISTRY/centos7_swig3_sgl
  script:
    - cd build
    - ctest -j 4
    - touch $CI_PROJECT_DIR/success
  artifacts:
    when: on_failure
    paths:
      - build/Testing/Temporary/
  dependencies:
    - build_redhat_swig3
  after_script:
    # Only show the failure log, if there were failures.
    # Also, the whole log is too long, so grep for lines of interest.
    - |
      if [ -e success ]; then
         echo "Good. Gooooood."
      else
         grep "Total Failures for" $CI_PROJECT_DIR/build/Testing/Temporary/LastTest.log
      fi

test_windows:
  stage: test
  extends: .normal_job
  tags:
    - win10
  script:
    - cd build
    - cmake --build . --target RUN_TESTS --config Release
  artifacts:
    when: on_failure
    paths:
    - build/Testing/Temporary/
  dependencies:
    - build_windows
  allow_failure: true
  timeout: 5m


# User_Install Stage
# Tests user install of GPSTk on each platform, saves artifacts for downstream builds.
user_install_debian_9:
  stage: install
  extends: .normal_job
  tags:
    - docker-executor
  image: $DOCKER_REGISTRY/debian9_fai_ish
  script:
    - cd build
    - export gpstk=`pwd`/install
    - export PYTHONPATH=$gpstk/lib/python2.7/site-packages
    - cmake -DPYTHON_INSTALL_PREFIX=$gpstk -DCMAKE_INSTALL_PREFIX=$gpstk ../
    - make install -j 4
    - python -c "import gpstk"
  artifacts:
    paths:
      - build/install
  dependencies:
    - build_debian_9

user_install_redhat:
  stage: install
  extends: .normal_job
  tags:
    - docker-executor
  image: $DOCKER_REGISTRY/centos7_sgl
  script:
    - cd build
    - export gpstk=`pwd`/install
    - export PYTHONPATH=$gpstk/lib/python2.7/site-packages
    - cmake -DPYTHON_INSTALL_PREFIX=$gpstk -DCMAKE_INSTALL_PREFIX=$gpstk ../
    - make install -j 4
    - python -c "import gpstk"
  artifacts:
    paths:
      - build/install
  dependencies:
    - build_redhat

user_install_redhat_swig3:
  stage: install
  extends: .normal_job
  tags:
    - docker-executor
  image: $DOCKER_REGISTRY/centos7_swig3_sgl
  script:
    - cd build
    - export gpstk=`pwd`/install
    - export PYTHONPATH=$gpstk/lib/python2.7/site-packages
    - cmake -DPYTHON_INSTALL_PREFIX=$gpstk -DCMAKE_INSTALL_PREFIX=$gpstk ../
    - make install -j 4
    - python -c "import gpstk"
  artifacts:
    paths:
      - build/install
  dependencies:
    - build_redhat_swig3

user_install_windows:
  stage: install
  extends: .normal_job
  tags:
    - win10
  script:
    - cd build
    - cmake --build . --config Release --target install
  dependencies:
    - build_windows
# Temporarily allow failures as Windows Runner issues are resolved
  allow_failure: true
  timeout: 5m

# System Stage
# Tests install of GPSTk on each platform, saves artifacts for downstream builds.
system_install_debian_9:
  stage: install
  extends: .normal_job
  tags:
    - docker-executor
  image: $DOCKER_REGISTRY/debian9_fai_ish
  script:
    - cd build
    - export gpstk=/usr/local
    - export PYTHONPATH=$gpstk/lib/python2.7/site-packages
    - cmake -DPYTHON_INSTALL_PREFIX=$gpstk -DCMAKE_INSTALL_PREFIX=$gpstk ../
    - sudo make install -j 4
    - python -c "import gpstk"
  dependencies:
    - build_debian_9


system_install_redhat:
  stage: install
  extends: .normal_job
  tags:
    - docker-executor
  image: $DOCKER_REGISTRY/centos7_sgl
  script:
    - cd build
    - export gpstk=/usr/local
    - cmake -DPYTHON_INSTALL_PREFIX=/usr -DCMAKE_INSTALL_PREFIX=$gpstk ../
    - sudo make install -j 4
    - python -c "import gpstk"
  dependencies:
    - build_redhat

system_install_redhat_swig3:
  stage: install
  extends: .normal_job
  tags:
    - docker-executor
  image: $DOCKER_REGISTRY/centos7_swig3_sgl
  script:
    - cd build
    - export gpstk=/usr/local
    - cmake -DPYTHON_INSTALL_PREFIX=/usr -DCMAKE_INSTALL_PREFIX=$gpstk ../
    - sudo make install -j 4
    - python -c "import gpstk"
  dependencies:
    - build_redhat_swig3

# Package Stage
# Tests packaging of GPSTk on all platforms
package_debian_8:
  stage: package
  extends: .package_build
  tags:
    - docker-executor
  image: $DOCKER_REGISTRY/debian8_fai_ish
  script:
    - rm -rf ../*.deb
    # Mark the debian log so that this package is a backport.
    # Use the most recent Maintainer as current maintainer.
    - export DEBEMAIL=$(dpkg-parsechangelog -S Maintainer)
    - dch --bpo "No Changes"
    - dpkg-buildpackage -us -uc -d --changes-option="-DDistribution=jessie-sgl"
    - mkdir debs
    - mv ../*.deb debs
    - mv ../*.changes debs
    - mv ../*.dsc debs
    - mv ../*.git debs
  artifacts:
    paths:
    - debs/
  dependencies:
    - build_debian_8

package_debian_9:
  stage: package
  extends: .package_build
  tags:
    - docker-executor
  image: $DOCKER_REGISTRY/debian9_fai_ish
  script:
    - rm -rf ../*.deb
    - dpkg-buildpackage -us -uc -d --changes-option="-DDistribution=stretch-sgl"
    - mkdir debs
    - mv ../*.deb debs
    - mv ../*.changes debs
    - mv ../*.dsc debs
    - mv ../*.git debs
    - mv ../*.buildinfo debs
  artifacts:
    paths:
      - debs/
  dependencies:
    - build_debian_9

package_debian_10:
  stage: package
  extends: .package_build
  tags:
    - docker-executor
  image: $DOCKER_REGISTRY/debian10_fai_ish
  script:
    - rm -rf ../*.deb
    # Mark the debian log so that this package is a backport.
    # Use the most recent Maintainer as current maintainer.
    - export DEBEMAIL=$(dpkg-parsechangelog -S Maintainer)
    - dch --bpo "No Changes"
    - dpkg-buildpackage -us -uc -d --changes-option="-DDistribution=buster-sgl"
    - mkdir debs
    - mv ../*.deb debs
    - mv ../*.changes debs
    - mv ../*.dsc debs
    - mv ../*.git debs
    - mv ../*.buildinfo debs
  artifacts:
    paths:
      - debs/
  dependencies:
    - build_debian_10

package_conda:
  stage: package
  extends: .package_build
  tags:
    - docker-executor
  image: $DOCKER_REGISTRY/deb9_conda_py36
  script:
    - conda activate conda_builder
    - export GIT_COMMIT=$CI_COMMIT_REF_NAME
    - conda-build conda_recipe_py36
    - mkdir -p conda-bld
    - cp -r $CONDA_PREFIX/conda-bld/* conda-bld/
  artifacts:
    paths:
      - conda-bld/linux-64/
  dependencies: []

package_redhat:
  stage: package
  extends: .package_build
  tags:
    - docker-executor
  image: $DOCKER_REGISTRY/centos7_sgl
  script:
    - bash rpm_files/setup_dirs.sh
    - git archive --prefix gpstk-master/ -o rpm_files/SOURCES/gpstk-master.tar.gz HEAD
    - pushd rpm_files
    - rpmbuild --define "_topdir ${PWD}" --define "debug_package %{nil}" -ba SPECS/gpstk.spec
  artifacts:
    paths:
      - rpm_files/RPMS/x86_64/gpstk-*
      - rpm_files/SRPMS/gpstk-*
  dependencies: []

package_redhat_py36:
  stage: package
  extends: .package_build
  tags:
    - docker-executor
  image: $DOCKER_REGISTRY/centos7_sgl
  script:
    - bash rpm_files/setup_dirs.sh
    - git archive --prefix python3-gpstk-master/ -o rpm_files/SOURCES/python3-gpstk-master.tar.gz HEAD
    - pushd rpm_files
    - rpmbuild --define "_topdir ${PWD}" --define "debug_package %{nil}" -ba SPECS/gpstk_py36.spec
  artifacts:
    paths:
      - rpm_files/RPMS/x86_64/python3-gpstk-*
      - rpm_files/SRPMS/python3-gpstk-*
  dependencies: []

package_redhat_py27:
  stage: package
  extends: .package_build
  tags:
    - docker-executor
  image: $DOCKER_REGISTRY/centos7_sgl
  script:
    - bash rpm_files/setup_dirs.sh
    - git archive --prefix python-gpstk-master/ -o rpm_files/SOURCES/python-gpstk-master.tar.gz HEAD
    - pushd rpm_files
    - rpmbuild --define "_topdir ${PWD}" --define "debug_package %{nil}" -ba SPECS/gpstk_py27.spec
  artifacts:
    paths:
      - rpm_files/RPMS/x86_64/python-gpstk-*
      - rpm_files/SRPMS/python-gpstk-*
  dependencies: []

# Deploy Stage
# Tests install of GPSTk package on each platform, saves artifacts for downstream builds.
deploy_debian_8:
  stage: deploy
  extends: .package_build
  tags:
    - docker-executor
  image: $DOCKER_REGISTRY/debian8_fai_ish
  script:
    - cd debs
    - sudo dpkg -i ./*.deb
    - python -c "import gpstk"
    - timeconvert
  dependencies:
    - package_debian_8

deploy_debian_9:
  stage: deploy
  extends: .package_build
  tags:
    - docker-executor
  image: $DOCKER_REGISTRY/debian9_fai_ish
  script:
    - cd debs
    - sudo apt-get -y install ./*.deb
    - python -c "import gpstk"
    - timeconvert
  dependencies:
    - package_debian_9

deploy_debian_10:
  stage: deploy
  extends: .package_build
  tags:
    - docker-executor
  image: $DOCKER_REGISTRY/debian10_fai_ish
  script:
    - cd debs
    - sudo apt-get -y install ./*.deb
    - python -c "import gpstk"
    - timeconvert
  dependencies:
    - package_debian_10

deploy_redhat:
  stage: deploy
  extends: .package_build
  tags:
    - docker-executor
  image: $DOCKER_REGISTRY/centos7_sgl
  script:
    - cd rpm_files/RPMS/x86_64/
    - sudo yum install gpstk-*.rpm -y
    - timeconvert
  dependencies:
    - package_redhat

deploy_redhat_py27:
  stage: deploy
  extends: .package_build
  tags:
    - docker-executor
  image: $DOCKER_REGISTRY/centos7_sgl
  script:
    - cd rpm_files/RPMS/x86_64/
    - sudo yum install gpstk-*.rpm -y
    - sudo yum install python-gpstk-*.rpm -y
    - python2 -c "import gpstk"
    - timeconvert
  dependencies:
    - package_redhat_py27
    - package_redhat

deploy_redhat_py36:
  stage: deploy
  extends: .package_build
  tags:
    - docker-executor
  image: $DOCKER_REGISTRY/centos7_sgl
  script:
    - cd rpm_files/RPMS/x86_64/
    - sudo yum install gpstk-*.rpm -y
    - sudo yum install python3-gpstk-*.rpm -y
    - python3 -c "import gpstk"
    - timeconvert
  dependencies:
    - package_redhat_py36
    - package_redhat

# package_windows:
#   stage: package
#   tags:
#     - win10
#   script:
#     - cd build
#     - cpack -C Release
#   dependencies:
#     - build_windows

# Temporarily allow failures as Windows Runner issues are resolved


sgltk_debian:
  stage: downstream
  extends: .normal_job
  tags:
    - docker-executor
  image: $DOCKER_REGISTRY/debian9_fai_ish
  script:
    - cd build
    - git clone https://repositories.arlut.utexas.edu/sgl/sgltk.git
    - export gpstk=`pwd`/install
    - export LD_LIBRARY_PATH=$gpstk/lib:$LD_LIBRARY_PATH
    - cd sgltk
    - mkdir build
    - cd build
    - cmake -DCMAKE_PREFIX_PATH=$gpstk -DBUILD_PYTHON=ON -DTEST_SWITCH=ON ../
    - make all -j 4
  dependencies:
    - user_install_debian_9

sgltk_redhat:
  stage: downstream
  extends: .normal_job
  tags:
    - docker-executor
  image: $DOCKER_REGISTRY/centos7_sgl
  script:
    - cd build
    - git clone https://repositories.arlut.utexas.edu/sgl/sgltk.git
    - export gpstk=`pwd`/install
    - export LD_LIBRARY_PATH=$gpstk/lib:$LD_LIBRARY_PATH
    - cd sgltk
    - mkdir build
    - cd build
    - cmake -DCMAKE_PREFIX_PATH=$gpstk -DBUILD_PYTHON=ON -DTEST_SWITCH=ON ../
    - make all -j 4
  dependencies:
    - user_install_redhat

sgltk_redhat_swig3:
  stage: downstream
  extends: .normal_job
  tags:
    - docker-executor
  image: $DOCKER_REGISTRY/centos7_swig3_sgl
  script:
    - cd build
    - git clone https://repositories.arlut.utexas.edu/sgl/sgltk.git
    - export gpstk=`pwd`/install
    - export LD_LIBRARY_PATH=$gpstk/lib:$LD_LIBRARY_PATH
    - cd sgltk
    - mkdir build
    - cd build
    - cmake -DCMAKE_PREFIX_PATH=$gpstk -DBUILD_PYTHON=ON -DTEST_SWITCH=ON ../
    - make all -j 4
  dependencies:
    - user_install_redhat_swig3
